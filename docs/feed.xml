<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Skydesign.blue</title>
    <description>Personal blog etc ...</description>
    <link>https://www.skydesign.blue/</link>
    <atom:link href="nathanrooy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 05 Nov 2021 00:01:15 +0000</pubDate>
    <lastBuildDate>Fri, 05 Nov 2021 00:01:15 +0000</lastBuildDate>
    <generator>Jekyll v3.9.1</generator>
      
    
    <item>
        <title>Donut Stones: an cryptocurrency for social good</title>
        <description>&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/photo-grid/dripping-donuts.png&quot; alt=&quot;Donut Stones&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Donut Stones is a ERC20 cryptocurrency I have started that aims to solve the problem of the (donut economy)[https://doughnuteconomics.org/about-doughnut-economics] 
and the limits to economic growth. The solidity code is open sourced on my &lt;a href=&quot;https://www.github.com/nfs002/donut-stones&quot;&gt;github&lt;/a&gt; and a link to the crowdsale website is below. Ive had some great feedback already on this one and its an extremely important cause so im hoping to develop it further.&lt;/p&gt;

&lt;h3 id=&quot;httpsnfs002githubiodonut-stones&quot;&gt;&lt;a href=&quot;https://nfs002.github.io/donut-stones&quot;&gt;https://nfs002.github.io/donut-stones&lt;/a&gt;&lt;/h3&gt;
</description>
        <pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate>
        
        <link>/posts/2021-11-04/donutstones.html</link>
          
        
            <category>crypto economics programming</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>Gallery: P2P home-gallery network for artists and exhibitors</title>
        <description>&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/photo-grid/gallery.png&quot; alt=&quot;Gallery logo&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Im writing about this project before I actually implement it, which is not how i usually do things, but ill udate this post when I do actually finish it. A few of my family members are quite ‘artsy’ and they are creative and can draw and paint well. I personally really enjoy and appreciste art but thats where the story ends. A lot of their college and school friends would consider themselves upcoming artists and also produce some amazing stuff. Recently, there was a week organised around the area in north London where I live in which all sort of different artists (painters, sculptors, potters, photographers, etc…) exhbited their own work in a gallery based inside their own homes (e.g in the TV room), so that anyone could knock on their door and have a look around the exhibition. The art mostly was for sale, but the exhibition itself was free. Details of all the artists and exhibitions were posted on a centralised website beforehand, so people could plan their trip and in what order to visit different houses. The rise of the ‘gig economy’ and different P2P platforms that connects end users offering all sorts of paid services (e.g Uber, AirBnB, Deliveroo) inspired me to design and implement a similar platform where upoming artists could either pay someone else to home-exhibit, or home-exhibit themselves. Anyone running a gallery from their own home may be hosting work from multiple different artists, and similarly a new artist could exhibit someone elses work, earning money for doing so and also gaining exposure by having people come and view their work who were may have only been initially interetsed in the more well known artist. This platform would be available as a website and possible a mobile app, that could connect artists and exhibitors from different cities, and also simulatenously serve as a hub where anyone can find information and the address of home-galleries and exhibitions near them, and also search for particular artists.&lt;/p&gt;

&lt;h2 id=&quot;more-to-follow&quot;&gt;More to follow…&lt;/h2&gt;
</description>
        <pubDate>Mon, 20 Apr 2020 00:00:00 +0100</pubDate>
        
        <link>/posts/2020-04-20/gallery.html</link>
          
        
            <category>art cs programming</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>TinderCatfish: A social network for tinder users</title>
        <description>&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/catfish/logo.png&quot; alt=&quot;TinderCatfish logo&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;TinderCatfish is a google chrome extension that at allows anyone to anonymously share feedback, comments, or reviews on other peoples tinder profiles. One feature of tinder that everyone may not be aware of is that all users who have a tinder account can create a public internet profile page, with a custom URL of the format
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.gotinder.com/@&amp;lt;handle&amp;gt;&lt;/code&gt;, where &amp;lt;handle&amp;gt; can be chosen by the user.
&lt;br /&gt; 
For example
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.gotinder.com/@john_smith&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Without this chrome extension installed, a Tinder profile page looks like this:&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/catfish/1.png&quot; alt=&quot;Tinder profile url page&quot; /&gt;
    &lt;figcaption&gt;A Tinder profile page&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The chrome extension I have written (TinderCatfish) detects whenever you visit one of the pages, and manipulates the DOM content and injects some extra javascript on the page, to rewrite it to look like this:&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/catfish/2.png&quot; alt=&quot;TinderCatfish profile url page&quot; /&gt;
    &lt;figcaption&gt;A TinderCatfish profile page&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The idea is that anyone can now leave feedback, comments, or reviews on anyone elses tinder profile. Everything that is posted is persisted in a MongoDB cluster, so anyone else using the extension will be able to see the comments when visiting the same profile page.&lt;/p&gt;

&lt;p&gt;One of the biggest reasons why I was motivated to do this is after the death of Grace Millane, it really highlighted how there is a lot big safety issue and potential dangers in online dating, especially since usually youre by yourself and meeting a complete stranger. Having some assurances and feedback left by other people would definetely allow people to feel more comfortable and also hopefully encourage new people who were previosuly apprehensive about using Tinder for this reason.&lt;/p&gt;

&lt;p&gt;Ive called it TinderCatfish because aside from the safety issues, this is also a great tool for gossiping about random tinder dates and essentially exposing catfish or psychos.&lt;/p&gt;

&lt;h3 id=&quot;future-development&quot;&gt;Future development&lt;/h3&gt;

&lt;p&gt;The current version (V-0.1) is pretty basic, although Ive submitted it to the Google chrome store already, although they said it could potentially take a few weeks to get approved. Im hoping that I can gage some metric of its popularity through this initial release, and then Im planning on adding a bunch of extra features in future versions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Searching for someones profile: In Version 0.1 the only way to find someones profile is to already know what their handle is, i.e by asking them on the date. However, I plan to introduce a search functionality that scans all profiles and stores each persons name, age, and occupation, and stores them in the database so they can be queried and searched.
I havent found a way to get other important information such as location and bio yet, but im looking at possible solutions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Authentication: At the moment anyone can leave a comment under any name, and you can even comment on your own profile. I want to introduce some authentication functionality, so that you &lt;em&gt;can&lt;/em&gt; login before you comment, in which case your comment would be automatically approved. If you post a comment without logging in, the comment would be have to be screened rigorously by a moderator to check what is hosted on the source IP, and what other comments came from that IP etc… to check this is an authentic comment. Or something like that…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;User accounts: Similar to the last point, this would allow users to create TinderCatfish accounts which they could link to their own Tinder profile. You could add and follow other TinderCatfish users and see their activity, including which dates they’ve been on, similar to a social network.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Generate profiles: If a tinder user doesnt have a web profile, Id like users to be able to create one on their behalf, using an accurate description and an appproved photo of that person.
Generated profiles would of course have to be hosted on a different domain.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enriched content: In future versions, posts will be able to consist of more than just plain text, and include other resources such as star ratings and even photos. You will be able to react to other peoples posts (similar to facebook) and filter and search for particular posts within a profile.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before it gets approved by Google,&lt;a href=&quot;https://github.com/NFS002/TinderCatfish&quot;&gt; you can also download it from my Github page here.&lt;/a&gt; The backend (Node.js &amp;amp; MongoDb) is &lt;a href=&quot;https://github.com/NFS002/CatfishServer&quot;&gt;also open source.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate>
        
        <link>/posts/2020-03-26/catfish.html</link>
          
        
            <category>tinder online-dating cs programming</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>Dp3: Youtube to mp3 cli tool</title>
        <description>&lt;p&gt;This will be a short post about a command line tool I wrote to extract and download mp3 streams from youtube videos. I wrote it for myself primarly because I listen to a lot of music and theres a lot of tracks on youtube which you cant get on spotify or other streaming apps.
General usage:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ dp3 search &amp;lt;regex&amp;gt;|[url] &amp;lt;file_name&amp;gt; &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The path to the folder in which the files are saved is set in a configuration file.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ dp3 https://www.youtube.com/watch?v=LaCd3YrEteE &quot;Kudasai - Technicolor&quot;&lt;/code&gt;&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/dp3/1.png&quot; alt=&quot;dp3 download&quot; /&gt;
    &lt;figcaption&gt;Downloading a track with a custom title&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ dp3 https://www.youtube.com/watch?v=LaCd3YrEteE&lt;/code&gt;&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/dp3/2.png&quot; alt=&quot;dp3 download&quot; /&gt;
    &lt;figcaption&gt;Downloading a track with the default (YouTube) title&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ dp3 search shiloh&lt;/code&gt;&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/dp3/3.png&quot; alt=&quot;dp3 download search&quot; /&gt;
    &lt;figcaption&gt;Searching previous downloads&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I wrote this in python 3, trying not to use too many external dependencies, and &lt;a href=&quot;https://www.github.com/nfs002/downloadmp3&quot;&gt; its available to clone or download on my github page. &lt;/a&gt; Ive verified it on MAC OS Mojave and Ubuntu 18.04 but I can vouch for Windows.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
        
        <link>/posts/2020-03-22/dp3.html</link>
          
        
            <category>music cs programming</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>A Secure electronic voting system</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/sevs/secure-voting.jpg&quot; alt=&quot;Secure electronic voting system&quot; width=&quot;300&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;E-Voting has been offered in Estonia for national elections since 2005, but amid a lot of controversy and ridicule. Other smaller state elections in the U.S and around the world have also made attempts at web-based voting, but definetely regretted the decision afterwards. Its fair to say that its not really a thing. Reliable and secure electronic voting seems like a bit of holy grail. Everyone is in agreement that it would be a positive development to the electoral systems themselves, but similarly every computer scientist and security researcher has warned against the sheer impossibility of guaranteeing against all possible security flaws vulnerabilities. A successful system would have to meet an unparalleled standard, and cryptography only goes so far. As of yet, these are some of the key remaining hurdles.&lt;/p&gt;

&lt;h4 id=&quot;ddos-mitigation&quot;&gt;DDos mitigation&lt;/h4&gt;
&lt;p&gt;It goes without saying why we need to be able to guarantee immunity from DDos attacks, although this in itself isnt really the problem, since many network providers are genuinely able to provide such a service.  Traditionally, most CDN and cloud networks rely on full-proxy, symmetric protection. But that requires full decryption of SSL communications before it is scrubbed, thereby adding latency and violating user privacy.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;An internet-wide scan we conducted found valid TLS certificates for the election website
being served by servers around the world.
Other solutions include behavioral and rate-based paramaters, or the &lt;a href=&quot;https://www.radware.com/solutions/ssl-protection/&quot;&gt;unique keyless hybrid solution offered by Radware.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;confidentiality&quot;&gt;Confidentiality&lt;/h4&gt;
&lt;p&gt;Confidentiality in computer networks refers to protecting information from being accessed by unauthorized parties. In the case of e-voting, this translates as only the voter should be able to know who they voted for. The vote server(s), where votes are collected and counted, should be able to validate and see the value of each vote, but not associate that vote back to the original voter, and all other parties should not be able to discern either. In traditional voting, Confidentiality is done easily through physical seperation, but in computer networks this is usually achieved through a combination of cryptographic hash functions, D-H key exchanges, and assymetric keys. Some propososed systems try to mimmick this seperationwith geographically remote servers for the different processes of voter registration, vote sorting, collecting and counting. Crucially, communication between these different processes is restricted.&lt;/p&gt;

&lt;h4 id=&quot;anonymity-and-privacy&quot;&gt;Anonymity and privacy&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ThreeBallot&quot;&gt;ThreeBallot&lt;/a&gt; is a conceptual system with some intersting security features, and in my own design I have simplified and slightly adapated the basic components of ThreeBallot to extract only the most crucial properties of voter &lt;b&gt;privacy&lt;/b&gt; and &lt;b&gt;anonymity.&lt;/b&gt; Similar to confidentiality, voter anonymity in this case would ensure that inspecting the content and value of any single vote would not reveal the identity of the voter. In traditional manual systems, we dont need to write our names on votes so this is not a problem, but in electronic systems, each vote must be &lt;b&gt;authenticated&lt;/b&gt; as belonging to a legitimate registered voter by marking the network packet containing the vote with some preconfigured identifier. It is problematic for a vote to be both authenticated and anonmymous but in this NBallot system, each voter votes in total n times ( where n is the number of candidates ), but (n - 1) of these votes will be redundant, and the remaining vote indicates the ‘real’ choice of candidate. How exactly votes are indicated as redundant could vary accoriding to implememtation, and in the original ThreeBallot system used negative voting,but in my own design, there is some key (in addition to any other encryption) that can only be interpreted by the vote collecting server and may be preconfigured at the time of voter registration. Since inspecting a single vote doesnt reveal anything about the ‘real’ choice of candidate, we could use the preferred form of SSL proxy DDos mitigation.&lt;/p&gt;

&lt;h4 id=&quot;integrity&quot;&gt;Integrity&lt;/h4&gt;
&lt;p&gt;Integrity, in the context of computer systems, refers to methods of ensuring that data is real, accurate and safeguarded from unauthorized user modification. With traditional paper balloting and hand counting, the entire process is not only clearly visible to those observing it, but it is also easily understandable to the average voter. The ballot box can be shown to be empty at the start of voting by polling staff, then sealed, observed in the polling station to ensure that only legitimate voters are putting in ballots, and at the end of voting the seal can be broken and the ballots counted in full view of observers. Therefore, most previous work on guaranteeing integrity in e-voting systems tries to promote transparency and verifiability as tools for ensuring the integrity of votes. &lt;b&gt;Transparency&lt;/b&gt; refers to how easily third parties may observe and monitor that each counting and sorting process is completed correctly.
&lt;b&gt;Verifiability&lt;/b&gt; has two meanings: At the individual level, all voters should be able to
verify that their votes have been correctly recorded and have been correctly included into the tally. At the universal level, anyone in the world should be able to verify the integrity of the tallying result, based on publicly available audit data. So while ensuring that voting and counting technologies are transparent does not alone guarantee that technologies will generate accurate results, it does provide the space and tools to do so. Audit trails and voter receipts are the usual mechanisms. However, in other aspects of computer network security, crypytographic hash functions, checksums and MAC codes can be used to prove that a message has been tampered or subject to MiTM attacks. The possibility of retransmission or restoring from a back-up copy must exists in this case. In NBallot, It seems we could that we could say with a high degree of certainty that votes have at least not been tampered or corrupted in transmission because any third party know could not know how to intepret the decoy keys, and which vote represents a genuine choice. Selecting a packet in the group at random and modifying its value would also fail, since each group of n votes must be authenticated by the collecting server as conforming to the rules and format of the NBallot system. Each decoy key must be unique in that group, and each group of decoy keys is chosen by the voter at registration time, and recorded by the server. In any of these keys have been modified, or any other formatting constraint fails, the whole group is void and should be retransmitted. &lt;b&gt;Voter registration&lt;/b&gt; is a prerequisite to voting whereby each personE who wishes to vote must register their intention with the electoral authorities, similar to the process of registering to vote in any election. The difference is that, in this system, each voter receives a unique identification number (Voter ID), which is then used to compute a digital signature on all of their network votes. After the election, all voter IDs and their chosen candidates could be posted on a public website. Without sacrificing voter privacy, each individual voter could verify that their own vote had been correctly recorded, and any third party may check that all votes has been counted and sorted correctly, and the correct candidate elected. The process of secure voter registration is complex and is detailed later.&lt;/p&gt;

&lt;p&gt;The security requirements of such a system come in many forms, and was always going to be a major issue, but cryptography can only so far. For example, any reliable system necessity will have to be able to secure and not vulnerable to DDos attacks. Network providers like Cloudflare, Akamai, or Emblaze do provide such a service, but at the unacceptable cost of unencrypted packet inspection.&lt;/p&gt;

&lt;p&gt;The implementation was suppossed to satisfy coursework requirements, and so parts of it could definitely be improved. For example, my own shoddy implementation of SSL.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The system must allow only votes for a predefined list of candidates, and from a predefined
list of voters, where the the two lists are equal. Votes must be anonymous and totally secure,
so no one, neither the server(s), possible attackers on the network, nor other candidates can
know who you have voted for.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This system can be roughly divided into 5 temporal stages, as shown in figure 1.3 below.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;before-registration&quot;&gt;Before registration&lt;/h4&gt;
    &lt;p&gt;All services are unavailable, other than information on where/when to register.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;registration&quot;&gt;Registration&lt;/h4&gt;
    &lt;p&gt;On receiving any request, the server passes the request to a timer gateway (which holds information about the designated registration time) and which look will the current time, and then either reject the client, or forward it to the registration service (probably on the same physical server) if the request is made within the registration hour. The request message is then read in full, validated and parsed. A valid request can only be a key request at this stage, where the clients ID number, configured in a configuration file or something (indicating that this client id allowed to register) is sent as a header with the request. An internal dictionary data structure, is checked to see if this ID has already made a previous failed or succesfull request, and a new nonce is generated and sent back to the client, along with the public key of the server accordingly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;transfer-time&quot;&gt;Transfer Time&lt;/h4&gt;
    &lt;p&gt;The mapping from ID numbers of registered voters to nonces is hashed (each ID number and nonce is hashed individually, so the map retains its structure) and the result is sent to the authentication
 server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;voting-hour&quot;&gt;Voting hour&lt;/h4&gt;
    &lt;p&gt;Similar to the registration hour, a timer gateway will only accept the request if it is made within the voting hour.
 When a vote is requested, the message must contain 4 headers: Hash(ID),
 Hash(Nonce), Hash(ID, Nonce, pubkey(Vote)) - i.e the MAC code, and pubkey(vote).
 The hashed ID and nonce are checked to see if they are included in the mapping it received from the registration server. If they are, the encrypted vote is succesfully extracted from the message (whilst still encrypted), and the mapping is removed from the list.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;after-voting&quot;&gt;After voting&lt;/h4&gt;
    &lt;p&gt;After Voting hour, the data the list of encrypted votes is sent back to the
 registration server, which then decrypts each of them individually,
 and sorts the list to find the winner.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In total there are 3+ registration servers, and a single voting server. Every client has to register with all registration servers to receives the public key of each server, and once they have registered, they must vote as many times as there registration servers, each vote in its own request and encryted with a different public key.  Each registration server then maintains a list of all clients registered on that server, and then only common entries on all registration lists will be authorised to vote. There can infact be any number of registration servers, but the more there are, the more confidently we can cofirm the true identity of the client as being on the list of pre-configured authorised voters, because, similar to 2FA, each potential voter would be told about the location and time of registration hour on each registration server via a different medium of communication. Since the the client must repeat their vote for as many registration servers as there are, each vote must be for the same candidate in order for it to be counted, and even if any two of the registration servers did communicate with each other to try and work out who had voted for who, they could not without the cooperation of all others. In conbination with an HMAC tag on each repeated vote, as the number of registration servers increases, the possibility or threat of fabrication or modification becomes negligible.&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/sevs/periods.png&quot; alt=&quot;The five time periods&quot; /&gt;
    &lt;figcaption&gt;The five time periods&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/sevs/arc1.png&quot; alt=&quot;The two types of server&quot; /&gt;
    &lt;figcaption&gt;The two types of server&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/sevs/arc2.png&quot; alt=&quot;A event flow for a single clients request pattern whilst registering and voting.&quot; /&gt;
    &lt;figcaption&gt;A event flow for a single clients request pattern whilst registering and voting.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The original implementation for this project was written in Java, and the source code is available from my &lt;a href=&quot;https://www.github.com/nfs002&quot;&gt;Github Page&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
        
        <link>/posts/2019-12-08/sevs.html</link>
          
        
            <category>programming networks</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>Cabaret</title>
        <description>&lt;h2 id=&quot;a-scalable-taxi-dispatch-system&quot;&gt;A scalable taxi dispatch system&lt;/h2&gt;

&lt;p&gt;Last semester, I took a class in distributed systems. One of the assignements was to design and implement 
a system which integrates as a component in the backend of an uber-like ( mobile taxi dispatch ) system. 
As specifications go, it was about as vague as it gets, but the words ‘middleware’ and ‘message-queue’ were said quite a bit.&lt;/p&gt;

&lt;p&gt;Ubers current system they use to connect and organise mobile network of consumers and drivers is called DISCO, which is an anagram for something about dispatch optimisation. Theres a pretty detailed blog post about it&lt;a href=&quot;https://medium.com/@narengowda/uber-system-design-8b2bc95e2cfe&quot;&gt; here, &lt;/a&gt; but essentially its supported by a giant infrastruture and terabytes of data.&lt;/p&gt;

&lt;p&gt;For this piece of coursework, I essentially developed my own version of this system using &lt;a href=&quot;https://grpc.io/&quot;&gt; gRPC &lt;/a&gt; and a &lt;a href=&quot;https://en.wikipedia.org/wiki/Chord_(peer-to-peer)&quot;&gt; the chord protocol (a distributed hash table).&lt;/a&gt; Alongside each piece of coursework we must submit a report detailing how to build and run the program, along with our design decisions and possible improvements. Below is my  offical report for the coursework, and I have open sourced the project also:&lt;/p&gt;
&lt;h3 id=&quot;httpsgithubcomnfs002cabaret&quot;&gt;&lt;a href=&quot;https://github.com/NFS002/Cabaret&quot;&gt;https://github.com/NFS002/Cabaret&lt;/a&gt;&lt;/h3&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-01.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-02.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-03.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-04.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-05.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-06.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-07.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-08.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-09.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-10.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-11.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-12.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-13.png&quot; /&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 27 Jul 2019 00:00:00 +0100</pubDate>
        
        <link>/posts/2019-07-27/cabaret.html</link>
          
        
            <category>programming software design</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>SimpleTradingBot</title>
        <description>&lt;p&gt;&lt;img width=&quot;300&quot; src=&quot;/images/stb/1.jpeg&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;another-binance-trading-bot&quot;&gt;Another Binance trading bot&lt;/h2&gt;

&lt;p&gt;Im generally quite involved in trading and investment strategy and I like to experiment with demo account and small stakes exploring new features on different trading platforms using technical anaylsis and quantative modelling. I first heard about bitcoin back in 2012, and Ive had a ago at trading it and some the other bigger cryptos a few times. I also followed closely the ICO boom and huge growth in crytocurrencies and ditributed ledger technologies in 2017,and look out for news updates from various channels and sources.
&lt;br /&gt;
I wanted to try an automated style of trading, i.e trades executed programmatically by a computer program (or ‘bot’) based on pre-determined rules and algorithms. Any bot is gonna need an exchange that maintains a reliable and complete API. The &lt;a href=&quot;https://www.binance.com/en&quot;&gt; Binance &lt;/a&gt; exhange is well suited. Their API is well documented and fairly easy to use. In 2016, they held a competition inviting programmers to write their own wrapper for the API in any programming language. The best wrapper for each language would become officially supported by Binance and the creator would win 1,000 BNB. The outcome of this is that now Java, as well as 8 other languages, all have open source clients which work pretty well. There is some information about the competion &lt;a href=&quot;https://www.binance.com/en/support/articles/115002604631-Winners-of-Binance-API-Competition&quot;&gt; here. &lt;/a&gt; The fact that Binance happens to be one of the biggest cryptocurrency trading exchanges, and at the time of wrting, supports over 500 currency pairs, and has a daily volume of $1,730,209,635 is obviously a huge bonus.&lt;/p&gt;

&lt;p&gt;There a lot of trading bots already out there on the market. Pretty much all of them support the binance exchange and usually some other exchanges as well. Some bots, like &lt;a href=&quot;https://margin.de/&quot;&gt;Margin &lt;/a&gt; ( formerly LeoNardo ) claim to support 20 different exchanges and as a fully fledged desktop application packed for various platforms and an impressive and interactive GUI. &lt;a href=&quot;https://gekko.wizb.it/&quot;&gt;  The Gekko &lt;/a&gt; bot is open source and pretty well respected. Theres many more as well, offering different features. Some are open source and free to use whilst others you have to purchase. Some, like &lt;a href=&quot;https://www.cryptohopper.com/&quot;&gt; Cryptohopper &lt;/a&gt; are hosted on a remote server and provide a web platform for users, which is potentially advantageous, but not ideal.&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img width=&quot;300&quot; src=&quot;/images/photo-grid/margin.png&quot; alt=&quot;The Margin (LeoNardo) bot&quot; /&gt;
    &lt;figcaption&gt;The Margin (LeoNardo) bot&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img width=&quot;300&quot; src=&quot;/images/stb/3.png&quot; alt=&quot;The Gekko bot&quot; /&gt;
    &lt;figcaption&gt;The Gekko bot&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img width=&quot;300&quot; src=&quot;/images/stb/2.png&quot; alt=&quot;Haasbot&quot; /&gt;
    &lt;figcaption&gt;Haasbot - another popular choice&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Ive had a pretty quick go with all these bots, and a few more that Ive played with as well. Usually, the open source ones do have bugs. When I tried Gekko in 2018, it was too buggy to use for real trading, but this might have changed now. The fact that they’re open source is very useful as it allows you to personally examine the source code and customise it however you like, but taking a big program like these ones and understanding the code line for line is pretty time consuming and fiddly process. Ive found the paid options can also have a few bugs, and now your reliant on someone else to fix it, which could take too long, or never even happen. You can also never really be sure that the program is executing as it should and the trades you make are what they say they are. Unfortunately, trading is gambling, and the concept of a trading bot is fairly experimental and so its always a bit of a risk to pay for it when you can never be certain of making the price back. Its even worse when they wont let you try the bot before you buy it. 
Ive never bought a bot, but some of them, such as &lt;a href=&quot;https://margin.de/&quot;&gt; Margin &lt;/a&gt; and &lt;a href=&quot;https://www.cryptohopper.com/&quot;&gt; Cryptohopper &lt;/a&gt;offer a free trial/demo version. 
&lt;br /&gt;
In the end I decided to write my own, with a client provided by the &lt;a href=&quot;https://github.com/binance-exchange/binance-java-api&quot;&gt;Java winner of the competion&lt;/a&gt;, João Silva. When you write your own, it is free, and you can personally responsible and aware of bugs, as well as implementing any feature you personally would like and you can be sure to really understand how it works also. I called my project Simple Trading Bot. I started it over a year ago, and then abandoned it when I realised that it was actually pretty difficult and fiddly to get this working smoothly and predictably, and theres alot of variables to consider other than just the exchange and the client. It was pretty unlikely to be profitable. Recently, I rewrote the whole thing and decided to have another go, this time paying more attention to code in the litte details and eventualities that really complicates the whole process.  Hopefully its still simple enough to justify its name.  Im at the stage now where Ive implemented most (~85%) of the necessary functionality and everyting seems to be going well, but Ill carry on testing before I deploy it live.&lt;/p&gt;

&lt;p&gt;I havent written a GUI because I log everything extensively to dedicated log files, and I can filter and search them efficiently with &lt;a href=&quot;https://logmx.com/&quot;&gt; another program called LogMX. &lt;/a&gt; 
Its a desktop application written in Java 8 but with a few maven dependencies such as Spring, Guava, Ta4j, and the Binance client.
&lt;br /&gt;
&lt;a href=&quot;https://github.com/NFS002/SimpleTradingBot&quot;&gt;Ive open sourced the project here.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;edit-18042020&quot;&gt;Edit 18/04/2020&lt;/h2&gt;

&lt;p&gt;Ive been working on this project on and off for a few years now, and I still work on this project whenever I get time. I would like to say that I finished an initial implementation for comprehesive live order management (on the binance exchange only), which includes mechanisms to open, update and monitor, as well as close, live orders. Ive also implemented a bunch of backtesting features for free EOD datasets off &lt;a href=&quot;https://www.quandl.com/data/EOD-End-of-Day-US-Stock-Prices&quot;&gt;Quandl.&lt;/a&gt; As far as an actual strategy goes…&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Jul 2019 00:00:00 +0100</pubDate>
        
        <link>/posts/2019-07-05/stb.html</link>
          
        
            <category>programming</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>PasseTonBillet</title>
        <description>&lt;h3 id=&quot;httpspassetonbilletfr&quot;&gt;&lt;a href=&quot;https://PasseTonBillet.fr&quot;&gt;https://PasseTonBillet.fr&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;a-platform-to-buy-and-sell-unused-train-tickets&quot;&gt;A platform to buy and sell unused train tickets&lt;/h4&gt;

&lt;p&gt;PasseTonBillet is a small startup based in France that I worked for on a voluntary basis during my penultimate year at St. Andrews. I initially got involved as I personally knew the other developer in the team, although recenltly I have had to put this commitment on hold temporarily due to other projects and my internship at Fidessa starting soon.&lt;/p&gt;

&lt;p&gt;PasseTonBillet.fr is a web based platform that allows users to buy and sell unwanted or unused train tickets. Currently, we support several different train providers such as Eurostar, Thalys, Prems, SNCF, and others. Users on the site can still sell tickets from other providers, but if the purchase is from one ot the supported providers, the original e-ticket (pdf) will be automatically emailed to the buyer on completion of the payment. 
The payment is made directly to the seller, and currently we do not charge commission. However, we did recently introduce our first paid feature, a premium-rate phone call directly to the buyer, allowing you to secure your purchase instantly without having to message them first and potentially be outbid by others.&lt;/p&gt;

&lt;p&gt;Theres not that many websites providing a similar service to PasseTonBillet. In the UK, reselling train tickets is strictly regulated, but it does depend on the type of ticket and whether you used an inermediary service ( such as trainline ) or not. Generally, reselling train tickets is illegal, as it contradicts the railways bye-laws  (2005) 21.1 to 21.4. as tickets are non-transferrable. It is also a further offence to buy one from an unauthorised source.&lt;/p&gt;

&lt;p&gt;The exact laws can vary a lot depending on the country and provider, and for international trains it is very unclear. There are some useful blog posts on the subject &lt;a href=&quot;https://www.transfertravel.com/blog-posts/understanding-rail-cancellation-policies&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://www.transfertravel.com/blog-posts/can-i-sell-my-train-ticket&quot;&gt;here.&lt;/a&gt; In a lot of cases, you could always sell somone a pen and throw in the tickets for free…&lt;/p&gt;

&lt;p&gt;The main issue we have faced so far when developing the platform is scammers. We get a lot of users selling expired, invalid or counterfeit tickets, and  often we find the same tickets listed on other sites as well. So, we have to put in to use several sophisticated security features and KYC authentication on sellers. This has proven to be pretty effective so far since customer reviews are generally positive and recently we have seen records of around 80 new user sign ups and 30 new tickets posted for sale a day. PasseTonBillet is implemented mainly in Laravel, Vue, and PostgreSQL.&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/ptb/1.png&quot; alt=&quot;PasseTonBillet home page&quot; /&gt;
    &lt;figcaption&gt;The home page&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/ptb/2.png&quot; alt=&quot;PasseTonBillet recent tickets&quot; /&gt;
    &lt;figcaption&gt;Recent tickets&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/ptb/3.png&quot; alt=&quot;PasseTonBillet user reviews&quot; /&gt;
    &lt;figcaption&gt;User reviews&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
        <pubDate>Thu, 27 Jun 2019 00:00:00 +0100</pubDate>
        
        <link>/posts/2019-06-27/ptb.html</link>
          
        
            <category>programming</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>Cudo donate</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/cudo/logo.png&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;using-javascript-to-mine-crypto-for-charity&quot;&gt;Using Javascript to mine crypto for charity&lt;/h3&gt;

&lt;p&gt;Cudo donate are an interesting company I worked for briefly last summer holidays. They are subsidiary of Cudo Ventures, a software company that had a few different teams creating products for different industries. Cudo donate was one of these teams, and one of their biggest products was cryptocurrency mining softtware, to either by deployed independently as a desktop application, or as a web application overlayed on an existng web page.&lt;/p&gt;

&lt;p&gt;Whilst desktop mining is much more popular and effective, web-based mining that runs a javascript background process when you visit a website, originally gained attention because it doesnt require anyone visiting the site to download anything first. Web based mining also uses the CPU, rather than traditional GPU mining.&lt;/p&gt;

&lt;p&gt;Due to the security sandbox that the browser runs in, that severly limits access to the CPU and priviliged memory, profitable web-based mining is pretty much impossible, and you usually wont even be able to cover your electricity costs.&lt;/p&gt;

&lt;p&gt;As reported by &lt;a href=&quot;https://Bitcoin.com&quot;&gt;Bitcoin.com,&lt;/a&gt; the Browse Aloud browser plug-in was hijacked and around 5,000 computers were stricken with embedded cryptocurrency mining scripts — among them British government computer systems. Even with 5,000 government computers, running these kinds of scripts led to only $24 of Monero being mined. Another &lt;a href=&quot;https://arxiv.org/pdf/1803.02887.pdf&quot;&gt; article on arXix &lt;a&gt; report how one of the biggest campaign operators using Coinhive — an in-browser cryptocurrency mining service — made a measly $7.69 USD after running Coinhive’s script on 11,000 websites for three months.
On the contrary, CoinHive is still raking it in. It keeps 30% of all mined Monero for itself, and its ad-hoc browser-mining botnet is responsible for 1.18 percent of the entire Monero network. An analysis of the overall hash rate and network statistics suggests that CoinHive generates over 300 XMR (approximately $24,000) each week.&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Despite this, the web version of this miner was still popular with a few major charities, including &lt;a href=&quot;https://www.childrensairambulance.org.uk/&quot;&gt;Childrens Air Ambulance&lt;/a&gt; who for a while, put this miner on their home page, which started your computer mining automatically on behalf of the charity when you visited the site. They’ve since taken it down.
Theres plenty of other cases of charities using web based mining for fundraising also. &lt;a href=&quot;https://change.org&quot;&gt;Change.org&lt;/a&gt; also launched its own philanthropic cryptocurrency mining initiative.&lt;/p&gt;

&lt;p&gt;“’The Mining Screensaver’ by Change.org claims to wield the ability to change the world by utilizing the processing power of computers worldwide. Anyone willing to contribute to the initiative can start mining by downloading and installing the screensaver app. All Monero generated is to be donated immediately to the Change.org Foundation, in full. Apparently, the screensaver would generate $10,000 worth of donations over one month, if 10,000 users ran the screensaver for 12 hours per day each.&lt;/p&gt;

&lt;p&gt;UNICEF has also launched &lt;a href=&quot;http://www.chaingers.io/&quot;&gt;Game Chaingers&lt;/a&gt; in an effort to bring together gamers from across the globe and have them unite their computing power for a good cause. This initiative uses the traditional type of minining with expensive GPU hardware. “To participate in this operation, all you need to do is to install Claymore, a mining software,” the Game Chaingers website reads. “You will be able to start or stop mining when you want, and generate Ethereum right in UNICEF’s electronic wallet.”&lt;/p&gt;

&lt;p&gt;There are many different kinds of mining algorithms for use with different cryptocurrencies and different hash rates. However, not all are suitable for web based mining with the CPU. Theres lots of different website providing profit calculators if you know your hash rate, but most people dont acually know their make and model of CPU, and if they did, asking them to enter this is a error prone and cumbersome. There are some CPU id programs out there, usually written in C, but theyre not guaranteed to work for all platforms and computers. In the end, we found &lt;a href=&quot;https://cryptoknight.cc/monero&quot;&gt;CryptoKnight&lt;/a&gt; to generally be a safe option, whilst other charities usually opt for CoinHive. Alternativelu, the NiceHash service is a mining marketplace with a unique model thats great for beginners.&lt;/p&gt;

&lt;p&gt;During my time at cudo, I rewrote the some of the existing web site from React and next to Vue and nuxt, modelled an SQL schema to map cpu models to optimum hash rates, and helped to develop our own CPU id programs, which although wasnt eventually used, I learned a lot in the process.&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/cudo/1.png&quot; alt=&quot;Cudo donate mining widget&quot; /&gt;
    &lt;figcaption&gt;The cudo donate crypto mining widget&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
        <pubDate>Thu, 27 Jun 2019 00:00:00 +0100</pubDate>
        
        <link>/posts/2019-06-27/cudo.html</link>
          
        
            <category>crypto programming</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>C&lt;sub&gt;2&lt;/sub&gt;P</title>
        <description>&lt;h3 id=&quot;contract-to-product-transaction-ledgers&quot;&gt;Contract to product transaction ledgers&lt;/h3&gt;
&lt;p&gt;The idea behind this project was to develop a open and centralised transaction ledger that can be queried for a detailed history on the ownership, history, and exchange of physical products and goods.
The C2P framework is a network with this ledger at its core, as well as a store of user accounts and products referenced by the ledger. A contract is an abstraction of this framework that describes the exchange or transfer of products  between accounts.&lt;/p&gt;

&lt;p&gt;The motivation for this project was to provide transparency and buyer security in the chinese second hand car market, which can be notoriously problematic. Using this framework, a detailed vehicle history can be made openly available to prospective buyers.
The ledger would contain inforation such as the date and location of original purchase, previous ownership, service, accident, location, and MOT history. This is just one use case of this network. In this case though, it is possible to implement that certain parts of the ledger be updated automtically, although particular event such as accidents must be recorded manually, I hope that vehicle owners would have the motivation to do this 
to increase the value of the vehicle and attract interest and confidence in buyers.&lt;/p&gt;

&lt;p&gt;Products must have a physical identifier intrinsically bound to the product hardware, such as a serial number.
User accounts must also be tightly bound to a single person, and KYC verification is some cases may also be necessary. All products tracked on the ledger must obviously have an original point at which they began, so designated permissioned accounts must have the ability to create products.&lt;/p&gt;

&lt;p&gt;The two diagrams illsustarte the idea in more detail.&lt;/p&gt;

&lt;p&gt;The class diagram refers specifically to a java implementation, but it gives some of the basic components and object abstractions required, such as contracts, accounts, and products.&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/ccp/2.jpeg&quot; alt=&quot;C2P java class dagram&quot; /&gt;
    &lt;figcaption&gt;C2P java class dagram&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This image shows the recursive relationship between products and contracts. A single product may be referenced my multiple contracts, and a single contact may reference multiple products. A contract must also also reference two accounts: The buyer/owner/giver and the seller/receiver. The process of querying the ledger and tracing back the history of a product to see what contarcts it has been used in, who are the participants of those contracts, and what other products were involved in those contracts can be seen here.&lt;/p&gt;

&lt;p&gt;The sequence of events illusrated below shows how a permissioned account A&lt;sub&gt;m&lt;/sub&gt; creates 5 proucts, P&lt;sub&gt;0-4&lt;/sub&gt;, and then sends a contract C&lt;sub&gt;0&lt;/sub&gt; to A &lt;sub&gt;0&lt;/sub&gt; products. The double blue lines show how this contract (C&lt;sub&gt;0&lt;/sub&gt;) contains all 5 of all these original products. A&lt;sub&gt;0&lt;/sub&gt; then decides to keeps P&lt;sub&gt;0&lt;/sub&gt;, and sends another contract (C&lt;sub&gt;1&lt;/sub&gt;) to A &lt;sub&gt;1&lt;/sub&gt;, that contains the remaining 4 products P&lt;sub&gt;1-4&lt;/sub&gt;. 
A&lt;sub&gt;1&lt;/sub&gt; then decides to keeps P&lt;sub&gt;1&lt;/sub&gt;, and sends another contract (C&lt;sub&gt;2&lt;/sub&gt;) to A &lt;sub&gt;2&lt;/sub&gt;, that contains the remaining 3 products P&lt;sub&gt;2-4&lt;/sub&gt;. 
This sequential series of events continues with each subsequent contract containing 1 less product than the contract before until each account A&lt;sub&gt;0-5&lt;/sub&gt; owns a single product.&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/ccp/3.jpg&quot; alt=&quot;C2P event ledger&quot; /&gt;
    &lt;figcaption&gt;Tracing history on the event ledger &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;At this point, given any contract or product on the ledger we can see the history of all the contracts a given product was involved in, and in turn all the contracts each product was involved in. The sequence of events given in the example above was purposefully simplistic, but depending on the actual sequence of events recorded on the ledger, it may be possible to realise and form a complete picture of all events recorded on the ledger from any single starting point.&lt;/p&gt;

&lt;p&gt;Having said this, for the purpose of privacy, there may be some authentication or security measure implemented to restrict access to particular parts such as accounts or unrelated contracts.&lt;/p&gt;

&lt;p&gt;The C2P network is a framework that may be implemented and adapted in different ways and to suit different purposes or retail markets.
My own implementation to demonstarte this idea, I have developed in Java and deployed on a Tomcat servlet container. The web interafce I write in Javascript, HTML5 and SAS/CSS. I didnt use any component frameworks, although I made heavy use of some popular libraries. The eventual idea behind the interface is to be able to create a user account, write contracts, create and send products, and query the ledger history.&lt;/p&gt;

&lt;p&gt;The site isnt quite finished yet, and I havent found an ideal server to deplo it on either, so currently I just able to provide screenshots taken from my own computer.&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/ccp/1.png&quot; alt=&quot;C2P login screen&quot; /&gt;
    &lt;figcaption&gt;The login screen&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/ccp/6.png&quot; alt=&quot;C2P user dashboard&quot; /&gt;
    &lt;figcaption&gt;The user dashboard&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/ccp/5.png&quot; alt=&quot;C2P contract write&quot; /&gt;
    &lt;figcaption&gt;Writing a contract&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/ccp/8.png&quot; alt=&quot;CCP user profile&quot; /&gt;
    &lt;figcaption&gt;Viewing another user profile&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/ccp/4.png&quot; alt=&quot;C2P contract view&quot; /&gt;
    &lt;figcaption&gt;Viewing contract details&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/ccp/7.png&quot; alt=&quot;C2P product view&quot; /&gt;
    &lt;figcaption&gt;Viewin product details&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
        <pubDate>Sun, 23 Jun 2019 00:00:00 +0100</pubDate>
        
        <link>/posts/2019-06-23/ccp.html</link>
          
        
            <category>c2p programming blockchain</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
  </channel>
</rss>
