<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Skydesign.blue</title>
    <description>Personal blog etc ...</description>
    <link>https://www.skydesign.blue/</link>
    <atom:link href="nathanrooy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 07 Jul 2022 13:09:44 +0100</pubDate>
    <lastBuildDate>Thu, 07 Jul 2022 13:09:44 +0100</lastBuildDate>
    <generator>Jekyll v3.9.1</generator>
      
    
    <item>
        <title>A Secure electronic voting system (version 2)</title>
        <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;This is version 2 of an &lt;a href=&quot;../sevs.html&quot;&gt;earlier post&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;temporal-stages-of-the-whole-election&quot;&gt;Temporal stages of the whole election&lt;/h2&gt;

&lt;p&gt;Ill start by first going over the 6 sequential phases during which the election takes place, and a winner is announced:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;before-registration&quot;&gt;Before registration&lt;/h4&gt;
    &lt;p&gt;All services are unavailable, other than information on where/when to register.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;registration&quot;&gt;Registration&lt;/h4&gt;
    &lt;p&gt;All voters must register to vote, providing identity credentials and in return receiving a set of single use keys to authorize the vote.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;redistributionshuffle-a&quot;&gt;Redistribution/shuffle (A)&lt;/h4&gt;
    &lt;p&gt;There are two resdistribution/shuffle stages, and each of them roughly conist of three sub-stages
 a) &lt;strong&gt;Anonymising&lt;/strong&gt; - This means hashing and encrypting all information sent by individual voters.&lt;/p&gt;

    &lt;p&gt;b) &lt;strong&gt;Shuffling&lt;/strong&gt; - Randomly shuffling the association between who the &lt;em&gt;voter&lt;/em&gt; is and who the &lt;em&gt;vote is for&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;c) &lt;strong&gt;Restributing&lt;/strong&gt; - Randomly distributing the data across different physical servers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;voting&quot;&gt;Voting&lt;/h4&gt;
    &lt;p&gt;All registered voters uses the credentials they obtained in stage 2 in addition to further credentials in a highly specific, verbose, and deliberately fragile protocol to cast 
their vote for their chose candidate&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;redistributionshuffle-b&quot;&gt;Redistribution/shuffle (B)&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;counting-and-sorting&quot;&gt;Counting and Sorting&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;Votes are counted across multiple distributed servers and the results are collected. The results are not collected and sorted, but rather a consensus is reached across all servers and the winner is decided through an election leadership protocol.&lt;/li&gt;
      &lt;li&gt;Individual votes are then published so the result can be publicly verified.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/sevs/temporal_stages.png&quot; alt=&quot;The six tempopral stages of the electronic election&quot; /&gt;
    &lt;figcaption&gt;The 6 temporal strages of the electronic election&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;system-architecture&quot;&gt;System Architecture&lt;/h2&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/sevs/system_architecture.png&quot; alt=&quot;secure electronic voting system architecture&quot; /&gt;
    &lt;figcaption&gt;System Architecture&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The proposed system architecture for this electronic voting system is shown in the diagram above. As you can hopefully see, its not that complicated. This diagram is a pretty big simplification, and doesnt include quite a few infrastructure features such as private subnets, and it also doesnt show the flow of data and order of events/protocols, but I think its a good starting point. Anyway, its not like I even know the complete picture myself, but some key points to note from this diagram are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This a web based system, and so does not rely on dedicated voting machines.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are two ‘groups’ of servers, the registration servers and the voting servers. There are at least 3 registration servers and 1 voting server&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each group is scalable individually, so there are potentially thousands of registration servers, and a similar (but not necessarilly the same) number of voting servers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Similar to MFA, The client performs the registration protocol by interfacing with all available (at least 3) registration servers.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;protocols&quot;&gt;Protocols&lt;/h2&gt;

&lt;p&gt;Ok, so now lets go through each of the temporal stages individually and illustrate (with the help of diagrams of course) the protocol(s) involved at each stage.&lt;/p&gt;

&lt;h3 id=&quot;before-registration-1&quot;&gt;Before Registration.&lt;/h3&gt;
&lt;p&gt;Nothing much to say here, everything is closed, any attempt to register or vote will error with instructions on how to register 
and what documents are required.&lt;/p&gt;

&lt;h3 id=&quot;registration-1&quot;&gt;Registration&lt;/h3&gt;

&lt;p&gt;As I mentioned above, the registration protocol actually takes place with the client interfacing with a sequence of &lt;em&gt;n&lt;/em&gt;  registration servers (where n &amp;gt;= 3). 
&lt;strong&gt;Lets call these three registration servers&lt;/strong&gt;
$RS_1 RS_2, RS_3$&lt;/p&gt;

&lt;h4 id=&quot;the-registration-protocol-sequence&quot;&gt;The registration protocol sequence&lt;/h4&gt;

&lt;p&gt;The registration protocol sequence works somewhat like this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before any network requests, the client ($C$)  generates n random keys, where n is the number of registration servers in the protocol sequence, in the case $n = 3$. One of these keys is chosen to be ‘real’ and the rest are decoys, but the client alone keeps track of which is which. Call these:&lt;/strong&gt;
$Ҝ_1, Ҝ_2, Ҝ_3$&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The client receives in the physical post their polling card as they usually would do, a password ($p_1$) (similar to the letter the bank sends you with your pin when you order a new bank card), and the hostname of the registration server which sent them this letter and in response they send:&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;a-to-rs_1&quot;&gt;a) to $RS_1$:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;$p_1$ (the password they just received in the post)&lt;/li&gt;
  &lt;li&gt;A hash of a randomly generated nonce $hash(n_1)$&lt;/li&gt;
  &lt;li&gt;Photos of documents verifying their identity such as a selfie, their passport, and a proof of address&lt;/li&gt;
  &lt;li&gt;Its own identity $C_identity$&lt;/li&gt;
  &lt;li&gt;One of its generated keys ($Ҝ_1$)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;b-to-rs_2&quot;&gt;b) to $RS_2$:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;$hostname(R_1)$&lt;/li&gt;
  &lt;li&gt;$n_1$&lt;/li&gt;
  &lt;li&gt;Another one of its generated keys $Ҝ_2$&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;b-to-rs_3&quot;&gt;b) to $RS_3$:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;$hostname(RS_1)$&lt;/li&gt;
  &lt;li&gt;$n_1$&lt;/li&gt;
  &lt;li&gt;The third generated keys $Ҝ_3$&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Both $RS_2$ and $RS_3$ then contact $RS_1$ with
    &lt;ul&gt;
      &lt;li&gt;$C_identity$&lt;/li&gt;
      &lt;li&gt;$n_1$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When $RS_1$ then receives these two requests, it checks to see if the hash of the received $n_1$ is the same as the value received in step 1a). If it is for both requests, and the same identity was requested from both $RS_2$ and $RS_3$, tand the $C_identity$ physical human identity was also successfully verified previously, then $RS_1$ responds with a simple success message.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;At this point, $RS_1 RS_2, RS_3$ are all on the same page and the client has succesfully registered. So, at this point each registration server store appends to a private internal data structure a mapping from ($C_identity$ -&amp;gt; $hash(K_i)$), where $K_i$ is the randomly generated key it received in stage 1.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;shuffle-redistribution-a&quot;&gt;Shuffle redistribution (a)&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;The private data structures are physically extracted from each of the n registration servers and manually escorted by a convoy of armed vehicle to the voting servers. The mapping that decides which registration server transfers their hard drive to which voting server is distributed randomised and to the extent that no single person or server has full knowledge of the complete mapping.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;voting-1&quot;&gt;Voting&lt;/h3&gt;

&lt;p&gt;The group of authentication servers form a distributed hash map, and 1/3 of records from each of their internal data stuctures are duplicated and distributed across some of the other voting servers.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Now the votes start to come in, and a single vote is made up of $n$ network requests, (remember, in this case $n = 3$):&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;a-to-any-randomly-chosen-voting-server&quot;&gt;a) to any randomly chosen voting server:&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;$C_identity$&lt;/li&gt;
  &lt;li&gt;($vote_1$, $Ҝ_1$)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;b-to-any-other-randomly-chosen-voting-server&quot;&gt;b) to any other randomly chosen voting server:&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;$C_identity$&lt;/li&gt;
  &lt;li&gt;($vote_2$, $K_2$)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;c-to-any-other-randomly-chosen-voting-server&quot;&gt;c) to any other randomly chosen voting server:&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;$C_identity$&lt;/li&gt;
  &lt;li&gt;($vote_3$, $K_3$)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Where (for example) the ‘real’ key is $Ҝ_1$, and the clients ‘real’ vote is $vote_1$, the client knows which is their real key and their fake key, and so sends the real key with their ‘real’ vote (i.e the candidate they actually want to vote for), and their decoy key with a fake vote (i.e any other candidate)&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Either of the network requests can be directed at any of the voting servers, as all voting servers together form a ring via the &lt;a href=&quot;https://www.inf.ed.ac.uk/teaching/courses/ip/chord-desc.html&quot;&gt;CHORD protocol&lt;/a&gt;, and because the ($C_identity$ -&amp;gt; $hash(K_i)$) mappings are duplicated and randomly distributed, on any voting server receiving a vote request, it performs the following steps:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Checks if it has a record for the received $C_identity$, if it does, it calculates the hash of the key in the voring request and if that matches.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;0.s which voting servers has a record for (b) and forwards the original request at this server using the &lt;a href=&quot;https://www.inf.ed.ac.uk/teaching/courses/ip/chord-desc.html&quot;&gt;CHORD protocol&lt;/a&gt;.
If no entry for $C_identity$ is found, an error response is returned to the client.&lt;/p&gt;

&lt;p&gt;c) The server checks if the nonce received&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Apr 2022 00:00:00 +0100</pubDate>
        
        <link>/posts/2022-04-29/sevs2.html</link>
          
        
            <category>programming networks evoting security</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>Donut Stones: A cryptocurrency for social good</title>
        <description>&lt;p&gt;Donut Stones is a ERC20 cryptocurrency I have started that aims to solve the problem of the (donut economy)[https://doughnuteconomics.org/about-doughnut-economics] 
and the limits to economic growth. The solidity code is open sourced on my &lt;a href=&quot;https://www.github.com/nfs002/donut-stones&quot;&gt;github&lt;/a&gt; and a link to the crowdsale website is below. Ive had some great feedback already on this one and its an extremely important cause so im hoping to develop it further.&lt;/p&gt;

&lt;h3 id=&quot;httpsnfs002githubiodonut-stones&quot;&gt;&lt;a href=&quot;https://nfs002.github.io/donut-stones&quot;&gt;https://nfs002.github.io/donut-stones&lt;/a&gt;&lt;/h3&gt;
</description>
        <pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate>
        
        <link>/posts/2021-11-04/donutstones.html</link>
          
        
            <category>crypto economics programming</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>Gallery: P2P home-gallery network for artists and exhibitors</title>
        <description>&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/photo-grid/gallery.png&quot; alt=&quot;Gallery logo&quot; /&gt;
&lt;/figure&gt;

&lt;h1 id=&quot;gallery&quot;&gt;Gallery&lt;/h1&gt;

&lt;h3 id=&quot;gallery-is-a-simple-web-app-that-builds-a-network-based-on-3-archetypes&quot;&gt;Gallery is a simple web app that builds a network based on 3 archetypes:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Hosts. Anyone can sign up to be a host, the host role entails that you are willing to be contacted
by artists who have signed up fot the platform and would potentially agree to host and display
some artists work whom you have met and spoken with to the public on arranged times/dates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Artists are pretty much what you would expect. For example, someone who has created a small collection of
pottery can sign up to this platform, contact hosts in their area and hopefully arrange a home exhibition.00&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Viewers, anyone with an interest in appreciating art can browse current exhibitions and their location on gallery,
and then email the host via gallery to check if they can come for a viewing.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, &lt;a href=&quot;https://github.com/NFS002/gallery&quot;&gt;the full source code can be found on my github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;techstack&quot;&gt;TechStack&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;PostgreSQL&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gobuffalo.io&quot;&gt;Gobuffalo framework for golang&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/gobuffalo/pop&quot;&gt;pop: sort-of-orm database tool for gobuffalo&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/gobuffalo/plush&quot;&gt;plush: html/golang temlplates for gobuffalo&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.heroku.com/platform&quot;&gt;Heroku PaaS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, A containerised &lt;strong&gt;MVP&lt;/strong&gt; is deployed on heroku &lt;a href=&quot;https://heroku-gallery-development.herokuapp.com&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Apr 2020 00:00:00 +0100</pubDate>
        
        <link>/posts/2020-04-20/gallery.html</link>
          
        
            <category>art cs programming</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>TinderCatfish: A social network for tinder users</title>
        <description>&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/catfish/logo.png&quot; alt=&quot;TinderCatfish logo&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;TinderCatfish is a google chrome extension that at allows anyone to anonymously share feedback, comments, or reviews on other peoples tinder profiles. One feature of tinder that everyone may not be aware of is that all users who have a tinder account can create a public internet profile page, with a custom URL of the format
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.gotinder.com/@&amp;lt;handle&amp;gt;&lt;/code&gt;, where &amp;lt;handle&amp;gt; can be chosen by the user.
&lt;br /&gt; 
For example
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.gotinder.com/@john_smith&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Without this chrome extension installed, a Tinder profile page looks like this:&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/catfish/1.png&quot; alt=&quot;Tinder profile url page&quot; /&gt;
    &lt;figcaption&gt;A Tinder profile page&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The chrome extension I have written (TinderCatfish) detects whenever you visit one of the pages, and manipulates the DOM content and injects some extra javascript on the page, to rewrite it to look like this:&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/catfish/2.png&quot; alt=&quot;TinderCatfish profile url page&quot; /&gt;
    &lt;figcaption&gt;A TinderCatfish profile page&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The idea is that anyone can now leave feedback, comments, or reviews on anyone elses tinder profile. Everything that is posted is persisted in a MongoDB cluster, so anyone else using the extension will be able to see the comments when visiting the same profile page.&lt;/p&gt;

&lt;p&gt;One of the biggest reasons why I was motivated to do this is after the death of Grace Millane, it really highlighted how there is a lot big safety issue and potential dangers in online dating, especially since usually youre by yourself and meeting a complete stranger. Having some assurances and feedback left by other people would definetely allow people to feel more comfortable and also hopefully encourage new people who were previosuly apprehensive about using Tinder for this reason.&lt;/p&gt;

&lt;p&gt;Ive called it TinderCatfish because aside from the safety issues, this is also a great tool for gossiping about random tinder dates and essentially exposing catfish or psychos.&lt;/p&gt;

&lt;h3 id=&quot;future-development&quot;&gt;Future development&lt;/h3&gt;

&lt;p&gt;The current version (V-0.1) is pretty basic, although Ive submitted it to the Google chrome store already, although they said it could potentially take a few weeks to get approved. Im hoping that I can gage some metric of its popularity through this initial release, and then Im planning on adding a bunch of extra features in future versions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Searching for someones profile: In Version 0.1 the only way to find someones profile is to already know what their handle is, i.e by asking them on the date. However, I plan to introduce a search functionality that scans all profiles and stores each persons name, age, and occupation, and stores them in the database so they can be queried and searched.
I havent found a way to get other important information such as location and bio yet, but im looking at possible solutions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Authentication: At the moment anyone can leave a comment under any name, and you can even comment on your own profile. I want to introduce some authentication functionality, so that you &lt;em&gt;can&lt;/em&gt; login before you comment, in which case your comment would be automatically approved. If you post a comment without logging in, the comment would be have to be screened rigorously by a moderator to check what is hosted on the source IP, and what other comments came from that IP etc… to check this is an authentic comment. Or something like that…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;User accounts: Similar to the last point, this would allow users to create TinderCatfish accounts which they could link to their own Tinder profile. You could add and follow other TinderCatfish users and see their activity, including which dates they’ve been on, similar to a social network.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Generate profiles: If a tinder user doesnt have a web profile, Id like users to be able to create one on their behalf, using an accurate description and an appproved photo of that person.
Generated profiles would of course have to be hosted on a different domain.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enriched content: In future versions, posts will be able to consist of more than just plain text, and include other resources such as star ratings and even photos. You will be able to react to other peoples posts (similar to facebook) and filter and search for particular posts within a profile.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before it gets approved by Google,&lt;a href=&quot;https://github.com/NFS002/TinderCatfish&quot;&gt; you can also download it from my Github page here.&lt;/a&gt; The backend (Node.js &amp;amp; MongoDb) is &lt;a href=&quot;https://github.com/NFS002/CatfishServer&quot;&gt;also open source.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate>
        
        <link>/posts/2020-03-26/catfish.html</link>
          
        
            <category>tinder online-dating cs programming</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>Dp3: Youtube to mp3 cli tool</title>
        <description>&lt;p&gt;This will be a short post about a command line tool I wrote to extract and download mp3 streams from youtube videos. I wrote it for myself primarly because I listen to a lot of music and theres a lot of tracks on youtube which you cant get on spotify or other streaming apps.
General usage:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ dp3 search &amp;lt;regex&amp;gt;|[url] &amp;lt;file_name&amp;gt; &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The path to the folder in which the files are saved is set in a configuration file.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ dp3 https://www.youtube.com/watch?v=LaCd3YrEteE &quot;Kudasai - Technicolor&quot;&lt;/code&gt;&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/dp3/1.png&quot; alt=&quot;dp3 download&quot; /&gt;
    &lt;figcaption&gt;Downloading a track with a custom title&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ dp3 https://www.youtube.com/watch?v=LaCd3YrEteE&lt;/code&gt;&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/dp3/2.png&quot; alt=&quot;dp3 download&quot; /&gt;
    &lt;figcaption&gt;Downloading a track with the default (YouTube) title&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ dp3 search shiloh&lt;/code&gt;&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/dp3/3.png&quot; alt=&quot;dp3 download search&quot; /&gt;
    &lt;figcaption&gt;Searching previous downloads&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I wrote this in python 3, trying not to use too many external dependencies, and &lt;a href=&quot;https://www.github.com/nfs002/downloadmp3&quot;&gt; its available to clone or download on my github page. &lt;/a&gt; Ive verified it on MAC OS Mojave and Ubuntu 18.04 but I can vouch for Windows.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
        
        <link>/posts/2020-03-22/dp3.html</link>
          
        
            <category>music cs programming</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>A Secure electronic voting system</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/sevs/secure-voting.jpg&quot; alt=&quot;Secure electronic voting system&quot; width=&quot;300&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;Ok so E-Voting is not a new idea, at all. Apparently 7 US states used some sort of automation even way back in the 1964 presedential election. Today, its actually used in various forms across the world, and some countries even use it for national and parliamentary elections. However, totally reliable and secure electronic voting seems like a bit of holy grail. I think most people are in agreement that it would be a positive development to the electoral systems themselves, but similarly every computer scientist and security researcher has warned against the sheer impossibility of guaranteeing against all possible security flaws and vulnerabilities. I guess that doesnt necessarilly mean its never gonna see wide adoption, but I tend to think that if a new technology is gonna be a hit, its gotta happen fairly quickly after its release. It might be similar to being accused of a crime you didnt commit, once the doubt sets in, its pretty hard to get rid of. And the more serious the crime (or the higher the stakes in the election), it becomes almost impossible to resolve all the residual uncertainty, and in case you were wondering, pairing e-voting with manual voting and giving voters the choice doesnt solve much either. Theres a bunch of different types of e-voting, but one of the main distinctions is the hardware (dedicated device vs computer/web-based), and each has its advantages. Interestingly, some secrity experts claim the problem is not with e-voting, but the inherent unpredictability of computational systems themselves. To be honest, that seems completely ridiculous to me, sure computers can crash randomly or have some untraceable bug, but so can humans ? And the latter actually seems a lot more likely.&lt;/p&gt;

&lt;p&gt;I dont doubt that security experts have found security problems in every attempt at online voting, and yes some of these problems simply dont exist in the manual system, but on the whole im not convinced that the traditional system has less flaws.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I think because a lot of people are gonna naturally cautious anyway about any e-voting system, whatever system is used has got to be really really good, and tick all the boxes. Traditional manual voting is definitely susceptible to vote manipulation, miscounting, and so many other security risks. But an e-voting system cant go near any of that stuff, Its gotta be anonymous,  accurate, private, tamper-proof, auditable, consistent, available, distributed, and a lot more. Oh, and its gotta do all this whilst also being simple and transparent, and &lt;em&gt;actually usable to the general public whilst also robust to the general public&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Given all that, I thought it would be fun to come up with my own system design and code my own implementation of an evoting system. 
Im a big fan of keeping things simple, I think its pretty much always a positive attribute to have for several reasons. Having said that, looking back on the same great iventions over the past few hundred years, some of the best ones are extremely complex, which gives me a bit of hope that I didnt totally waste my time trying to create something totally pointless. Either way, I gave up on the complex version, and went back to basics. Now, its just a relatively simple client server system with strong hints of &lt;a href=&quot;https://en.wikipedia.org/wiki/ThreeBallot&quot;&gt;ThreeBallot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The original implementation for this project was written in Java, and the source code is available from my &lt;a href=&quot;https://www.github.com/nfs002&quot;&gt;Github Page&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
        
        <link>/posts/2019-12-08/sevs.html</link>
          
        
            <category>programming networks</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>Cabaret</title>
        <description>&lt;h2 id=&quot;a-scalable-taxi-dispatch-system&quot;&gt;A scalable taxi dispatch system&lt;/h2&gt;

&lt;p&gt;Last semester, I took a class in distributed systems. One of the assignements was to design and implement 
a system which integrates as a component in the backend of an uber-like ( mobile taxi dispatch ) system. 
As specifications go, it was about as vague as it gets, but the words ‘middleware’ and ‘message-queue’ were said quite a bit.&lt;/p&gt;

&lt;p&gt;Ubers current system they use to connect and organise mobile network of consumers and drivers is called DISCO, which is an anagram for something about dispatch optimisation. Theres a pretty detailed blog post about it&lt;a href=&quot;https://medium.com/@narengowda/uber-system-design-8b2bc95e2cfe&quot;&gt; here, &lt;/a&gt; but essentially its supported by a giant infrastruture and terabytes of data.&lt;/p&gt;

&lt;p&gt;For this piece of coursework, I essentially developed my own version of this system using &lt;a href=&quot;https://grpc.io/&quot;&gt; gRPC &lt;/a&gt; and a &lt;a href=&quot;https://en.wikipedia.org/wiki/Chord_(peer-to-peer)&quot;&gt; the chord protocol (a distributed hash table).&lt;/a&gt; Alongside each piece of coursework we must submit a report detailing how to build and run the program, along with our design decisions and possible improvements. Below is my  offical report for the coursework, and I have open sourced the project also:&lt;/p&gt;
&lt;h3 id=&quot;httpsgithubcomnfs002cabaret&quot;&gt;&lt;a href=&quot;https://github.com/NFS002/Cabaret&quot;&gt;https://github.com/NFS002/Cabaret&lt;/a&gt;&lt;/h3&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-01.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-02.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-03.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-04.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-05.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-06.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-07.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-08.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-09.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-10.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-11.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-12.png&quot; /&gt;
&lt;img alt=&quot;CS3301-P2 Report&quot; width=&quot;900&quot; src=&quot;/images/cabaret/CS3301_P2-13.png&quot; /&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 27 Jul 2019 00:00:00 +0100</pubDate>
        
        <link>/posts/2019-07-27/cabaret.html</link>
          
        
            <category>programming software design</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>SimpleTradingBot</title>
        <description>&lt;p&gt;&lt;img width=&quot;300&quot; src=&quot;/images/stb/1.jpeg&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;another-binance-trading-bot&quot;&gt;Another Binance trading bot&lt;/h2&gt;

&lt;p&gt;Im generally quite involved in trading and investment strategy and I like to experiment with demo account and small stakes exploring new features on different trading platforms using technical anaylsis and quantative modelling. I first heard about bitcoin back in 2012, and Ive had a ago at trading it and some the other bigger cryptos a few times. I also followed closely the ICO boom and huge growth in crytocurrencies and ditributed ledger technologies in 2017,and look out for news updates from various channels and sources.
&lt;br /&gt;
I wanted to try an automated style of trading, i.e trades executed programmatically by a computer program (or ‘bot’) based on pre-determined rules and algorithms. Any bot is gonna need an exchange that maintains a reliable and complete API. The &lt;a href=&quot;https://www.binance.com/en&quot;&gt; Binance &lt;/a&gt; exhange is well suited. Their API is well documented and fairly easy to use. In 2016, they held a competition inviting programmers to write their own wrapper for the API in any programming language. The best wrapper for each language would become officially supported by Binance and the creator would win 1,000 BNB. The outcome of this is that now Java, as well as 8 other languages, all have open source clients which work pretty well. There is some information about the competion &lt;a href=&quot;https://www.binance.com/en/support/articles/115002604631-Winners-of-Binance-API-Competition&quot;&gt; here. &lt;/a&gt; The fact that Binance happens to be one of the biggest cryptocurrency trading exchanges, and at the time of wrting, supports over 500 currency pairs, and has a daily volume of $1,730,209,635 is obviously a huge bonus.&lt;/p&gt;

&lt;p&gt;There a lot of trading bots already out there on the market. Pretty much all of them support the binance exchange and usually some other exchanges as well. Some bots, like &lt;a href=&quot;https://margin.de/&quot;&gt;Margin &lt;/a&gt; ( formerly LeoNardo ) claim to support 20 different exchanges and as a fully fledged desktop application packed for various platforms and an impressive and interactive GUI. &lt;a href=&quot;https://gekko.wizb.it/&quot;&gt;  The Gekko &lt;/a&gt; bot is open source and pretty well respected. Theres many more as well, offering different features. Some are open source and free to use whilst others you have to purchase. Some, like &lt;a href=&quot;https://www.cryptohopper.com/&quot;&gt; Cryptohopper &lt;/a&gt; are hosted on a remote server and provide a web platform for users, which is potentially advantageous, but not ideal.&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img width=&quot;300&quot; src=&quot;/images/photo-grid/margin.png&quot; alt=&quot;The Margin (LeoNardo) bot&quot; /&gt;
    &lt;figcaption&gt;The Margin (LeoNardo) bot&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img width=&quot;300&quot; src=&quot;/images/stb/3.png&quot; alt=&quot;The Gekko bot&quot; /&gt;
    &lt;figcaption&gt;The Gekko bot&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img width=&quot;300&quot; src=&quot;/images/stb/2.png&quot; alt=&quot;Haasbot&quot; /&gt;
    &lt;figcaption&gt;Haasbot - another popular choice&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Ive had a pretty quick go with all these bots, and a few more that Ive played with as well. Usually, the open source ones do have bugs. When I tried Gekko in 2018, it was too buggy to use for real trading, but this might have changed now. The fact that they’re open source is very useful as it allows you to personally examine the source code and customise it however you like, but taking a big program like these ones and understanding the code line for line is pretty time consuming and fiddly process. Ive found the paid options can also have a few bugs, and now your reliant on someone else to fix it, which could take too long, or never even happen. You can also never really be sure that the program is executing as it should and the trades you make are what they say they are. Unfortunately, trading is gambling, and the concept of a trading bot is fairly experimental and so its always a bit of a risk to pay for it when you can never be certain of making the price back. Its even worse when they wont let you try the bot before you buy it. 
Ive never bought a bot, but some of them, such as &lt;a href=&quot;https://margin.de/&quot;&gt; Margin &lt;/a&gt; and &lt;a href=&quot;https://www.cryptohopper.com/&quot;&gt; Cryptohopper &lt;/a&gt;offer a free trial/demo version. 
&lt;br /&gt;
In the end I decided to write my own, with a client provided by the &lt;a href=&quot;https://github.com/binance-exchange/binance-java-api&quot;&gt;Java winner of the competion&lt;/a&gt;, João Silva. When you write your own, it is free, and you can personally responsible and aware of bugs, as well as implementing any feature you personally would like and you can be sure to really understand how it works also. I called my project Simple Trading Bot. I started it over a year ago, and then abandoned it when I realised that it was actually pretty difficult and fiddly to get this working smoothly and predictably, and theres alot of variables to consider other than just the exchange and the client. It was pretty unlikely to be profitable. Recently, I rewrote the whole thing and decided to have another go, this time paying more attention to code in the litte details and eventualities that really complicates the whole process.  Hopefully its still simple enough to justify its name.  Im at the stage now where Ive implemented most (~85%) of the necessary functionality and everyting seems to be going well, but Ill carry on testing before I deploy it live.&lt;/p&gt;

&lt;p&gt;I havent written a GUI because I log everything extensively to dedicated log files, and I can filter and search them efficiently with &lt;a href=&quot;https://logmx.com/&quot;&gt; another program called LogMX. &lt;/a&gt; 
Its a desktop application written in Java 8 but with a few maven dependencies such as Spring, Guava, Ta4j, and the Binance client.
&lt;br /&gt;
&lt;a href=&quot;https://github.com/NFS002/SimpleTradingBot&quot;&gt;Ive open sourced the project here.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;edit-18042020&quot;&gt;Edit 18/04/2020&lt;/h2&gt;

&lt;p&gt;Ive been working on this project on and off for a few years now, and I still work on this project whenever I get time. I would like to say that I finished an initial implementation for comprehesive live order management (on the binance exchange only), which includes mechanisms to open, update and monitor, as well as close, live orders. Ive also implemented a bunch of backtesting features for free EOD datasets off &lt;a href=&quot;https://www.quandl.com/data/EOD-End-of-Day-US-Stock-Prices&quot;&gt;Quandl.&lt;/a&gt; As far as an actual strategy goes…&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Jul 2019 00:00:00 +0100</pubDate>
        
        <link>/posts/2019-07-05/stb.html</link>
          
        
            <category>programming</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>PasseTonBillet</title>
        <description>&lt;h3 id=&quot;httpspassetonbilletfr&quot;&gt;&lt;a href=&quot;https://PasseTonBillet.fr&quot;&gt;https://PasseTonBillet.fr&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;a-platform-to-buy-and-sell-unused-train-tickets&quot;&gt;A platform to buy and sell unused train tickets&lt;/h4&gt;

&lt;p&gt;PasseTonBillet is a small startup based in France that I worked for on a voluntary basis during my penultimate year at St. Andrews. I initially got involved as I personally knew the other developer in the team, although recenltly I have had to put this commitment on hold temporarily due to other projects and my internship at Fidessa starting soon.&lt;/p&gt;

&lt;p&gt;PasseTonBillet.fr is a web based platform that allows users to buy and sell unwanted or unused train tickets. Currently, we support several different train providers such as Eurostar, Thalys, Prems, SNCF, and others. Users on the site can still sell tickets from other providers, but if the purchase is from one ot the supported providers, the original e-ticket (pdf) will be automatically emailed to the buyer on completion of the payment. 
The payment is made directly to the seller, and currently we do not charge commission. However, we did recently introduce our first paid feature, a premium-rate phone call directly to the buyer, allowing you to secure your purchase instantly without having to message them first and potentially be outbid by others.&lt;/p&gt;

&lt;p&gt;Theres not that many websites providing a similar service to PasseTonBillet. In the UK, reselling train tickets is strictly regulated, but it does depend on the type of ticket and whether you used an inermediary service ( such as trainline ) or not. Generally, reselling train tickets is illegal, as it contradicts the railways bye-laws  (2005) 21.1 to 21.4. as tickets are non-transferrable. It is also a further offence to buy one from an unauthorised source.&lt;/p&gt;

&lt;p&gt;The exact laws can vary a lot depending on the country and provider, and for international trains it is very unclear. There are some useful blog posts on the subject &lt;a href=&quot;https://www.transfertravel.com/blog-posts/understanding-rail-cancellation-policies&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://www.transfertravel.com/blog-posts/can-i-sell-my-train-ticket&quot;&gt;here.&lt;/a&gt; In a lot of cases, you could always sell somone a pen and throw in the tickets for free…&lt;/p&gt;

&lt;p&gt;The main issue we have faced so far when developing the platform is scammers. We get a lot of users selling expired, invalid or counterfeit tickets, and  often we find the same tickets listed on other sites as well. So, we have to put in to use several sophisticated security features and KYC authentication on sellers. This has proven to be pretty effective so far since customer reviews are generally positive and recently we have seen records of around 80 new user sign ups and 30 new tickets posted for sale a day. PasseTonBillet is implemented mainly in Laravel, Vue, and PostgreSQL.&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/ptb/1.png&quot; alt=&quot;PasseTonBillet home page&quot; /&gt;
    &lt;figcaption&gt;The home page&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/ptb/2.png&quot; alt=&quot;PasseTonBillet recent tickets&quot; /&gt;
    &lt;figcaption&gt;Recent tickets&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/ptb/3.png&quot; alt=&quot;PasseTonBillet user reviews&quot; /&gt;
    &lt;figcaption&gt;User reviews&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
        <pubDate>Thu, 27 Jun 2019 00:00:00 +0100</pubDate>
        
        <link>/posts/2019-06-27/ptb.html</link>
          
        
            <category>programming</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
    <item>
        <title>Cudo donate</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/cudo/logo.png&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;using-javascript-to-mine-crypto-for-charity&quot;&gt;Using Javascript to mine crypto for charity&lt;/h3&gt;

&lt;p&gt;Cudo donate are an interesting company I worked for briefly last summer holidays. They are subsidiary of Cudo Ventures, a software company that had a few different teams creating products for different industries. Cudo donate was one of these teams, and one of their biggest products was cryptocurrency mining softtware, to either by deployed independently as a desktop application, or as a web application overlayed on an existng web page.&lt;/p&gt;

&lt;p&gt;Whilst desktop mining is much more popular and effective, web-based mining that runs a javascript background process when you visit a website, originally gained attention because it doesnt require anyone visiting the site to download anything first. Web based mining also uses the CPU, rather than traditional GPU mining.&lt;/p&gt;

&lt;p&gt;Due to the security sandbox that the browser runs in, that severly limits access to the CPU and priviliged memory, profitable web-based mining is pretty much impossible, and you usually wont even be able to cover your electricity costs.&lt;/p&gt;

&lt;p&gt;As reported by &lt;a href=&quot;https://Bitcoin.com&quot;&gt;Bitcoin.com,&lt;/a&gt; the Browse Aloud browser plug-in was hijacked and around 5,000 computers were stricken with embedded cryptocurrency mining scripts — among them British government computer systems. Even with 5,000 government computers, running these kinds of scripts led to only $24 of Monero being mined. Another &lt;a href=&quot;https://arxiv.org/pdf/1803.02887.pdf&quot;&gt; article on arXix &lt;a&gt; report how one of the biggest campaign operators using Coinhive — an in-browser cryptocurrency mining service — made a measly $7.69 USD after running Coinhive’s script on 11,000 websites for three months.
On the contrary, CoinHive is still raking it in. It keeps 30% of all mined Monero for itself, and its ad-hoc browser-mining botnet is responsible for 1.18 percent of the entire Monero network. An analysis of the overall hash rate and network statistics suggests that CoinHive generates over 300 XMR (approximately $24,000) each week.&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Despite this, the web version of this miner was still popular with a few major charities, including &lt;a href=&quot;https://www.childrensairambulance.org.uk/&quot;&gt;Childrens Air Ambulance&lt;/a&gt; who for a while, put this miner on their home page, which started your computer mining automatically on behalf of the charity when you visited the site. They’ve since taken it down.
Theres plenty of other cases of charities using web based mining for fundraising also. &lt;a href=&quot;https://change.org&quot;&gt;Change.org&lt;/a&gt; also launched its own philanthropic cryptocurrency mining initiative.&lt;/p&gt;

&lt;p&gt;“’The Mining Screensaver’ by Change.org claims to wield the ability to change the world by utilizing the processing power of computers worldwide. Anyone willing to contribute to the initiative can start mining by downloading and installing the screensaver app. All Monero generated is to be donated immediately to the Change.org Foundation, in full. Apparently, the screensaver would generate $10,000 worth of donations over one month, if 10,000 users ran the screensaver for 12 hours per day each.&lt;/p&gt;

&lt;p&gt;UNICEF has also launched &lt;a href=&quot;http://www.chaingers.io/&quot;&gt;Game Chaingers&lt;/a&gt; in an effort to bring together gamers from across the globe and have them unite their computing power for a good cause. This initiative uses the traditional type of minining with expensive GPU hardware. “To participate in this operation, all you need to do is to install Claymore, a mining software,” the Game Chaingers website reads. “You will be able to start or stop mining when you want, and generate Ethereum right in UNICEF’s electronic wallet.”&lt;/p&gt;

&lt;p&gt;There are many different kinds of mining algorithms for use with different cryptocurrencies and different hash rates. However, not all are suitable for web based mining with the CPU. Theres lots of different website providing profit calculators if you know your hash rate, but most people dont acually know their make and model of CPU, and if they did, asking them to enter this is a error prone and cumbersome. There are some CPU id programs out there, usually written in C, but theyre not guaranteed to work for all platforms and computers. In the end, we found &lt;a href=&quot;https://cryptoknight.cc/monero&quot;&gt;CryptoKnight&lt;/a&gt; to generally be a safe option, whilst other charities usually opt for CoinHive. Alternativelu, the NiceHash service is a mining marketplace with a unique model thats great for beginners.&lt;/p&gt;

&lt;p&gt;During my time at cudo, I rewrote the some of the existing web site from React and next to Vue and nuxt, modelled an SQL schema to map cpu models to optimum hash rates, and helped to develop our own CPU id programs, which although wasnt eventually used, I learned a lot in the process.&lt;/p&gt;

&lt;figure style=&quot;text-align:center&quot;&gt;
    &lt;img src=&quot;/images/cudo/1.png&quot; alt=&quot;Cudo donate mining widget&quot; /&gt;
    &lt;figcaption&gt;The cudo donate crypto mining widget&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
        <pubDate>Thu, 27 Jun 2019 00:00:00 +0100</pubDate>
        
        <link>/posts/2019-06-27/cudo.html</link>
          
        
            <category>crypto programming</category>
        
          
        
            <category>posts</category>
        
          
      </item>
    
  </channel>
</rss>
